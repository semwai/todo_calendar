import {createAsyncThunk, createSlice, PayloadAction} from "@reduxjs/toolkit";
import {RootState} from "../../app/store";
import {fetchDays} from "./calendarApi";

export interface CalendarState {
    day: number
    month: number
    year: number
    table: IDay[][] | null
    status: string // статус загрузки с внешнего api
}

const initialState: CalendarState = {
    day: (new Date).getDate(),
    month: (new Date).getMonth(),
    year: (new Date).getFullYear(),
    table: null,
    status: 'idle'
};

export interface IDay {
    num: number // номер дня
    holiday: boolean // выходной ли
    today?: boolean
}

export const emptyDay = {
    num: 0, holiday: false
}

export const fetchDaysAsync = createAsyncThunk(
    'calendar/fetchDays',
    async ({year, month}: {year: number, month: number}) => {
        return await fetchDays(year, month);
    }
);

export const calendarSlice = createSlice({
    name: 'calendar',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        setDay: (state, action: PayloadAction<number>) => {
            state.day = action.payload
        },
        setMonth: (state, action: PayloadAction<number>) => {
            state.month = action.payload
        },
        setYear: (state, action: PayloadAction<number>) => {
            state.year = action.payload
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
    builder
        .addCase(fetchDaysAsync.pending, (state) => {
            state.status = 'loading';
        })
        .addCase(fetchDaysAsync.fulfilled, (state, action) => {
            state.status = 'idle';
            state.table = action.payload;
        })
        .addCase(fetchDaysAsync.rejected, (state) => {
            state.status = 'failed';
        });
}
});

export const { setDay, setMonth, setYear } = calendarSlice.actions;

export const selectCalendar = (state: RootState) => state.calendar;

export default calendarSlice.reducer;